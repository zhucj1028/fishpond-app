package ${root.basePackage}.controller;

import ${root.basePackage}.entity.${root.entityClassName};
import ${root.basePackage}.service.${root.entityClassName}Service;
import cn.hutool.core.util.IdUtil;
import com.baomidou.mybatisplus.core.conditions.query.QueryWrapper;
import com.baomidou.mybatisplus.core.metadata.IPage;
import com.baomidou.mybatisplus.extension.plugins.pagination.Page;
import com.fishpond.fishpondapp.common.constant.DeletedConstants;
import com.fishpond.fishpondapp.common.response.R;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.tags.Tag;
import lombok.RequiredArgsConstructor;
import org.springframework.security.access.prepost.PreAuthorize;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;

import java.util.List;

/**
 * ${root.comment} Controller
 *
 * @author ${root.author}
 * @since ${root.version}
 */
@Tag(name = "${root.comment}")
@RequiredArgsConstructor
@RestController
@RequestMapping("$root.controllerMapping")
class ${root.entityClassName}Controller {
    private final ${root.entityClassName}Service ${root.entityClassVarName}Service;

    @Operation(summary = "按条件分页查询所有")
    @PostMapping("/v1/page")
    @PreAuthorize("@atc.admin")//默认只有管理员能访问该接口。其他设置：@atc.admin、@atc.user、@atc.inside、@atc.hasAuthority('xxx')
    public R<IPage<${root.entityClassName}>> v1Page(@RequestBody Page<${root.entityClassName}> page) {
#if($root.controllerContainsDeleted)
#end
        QueryWrapper<${root.entityClassName}> queryWrapper = new QueryWrapper<>();
        queryWrapper.eq("deleted", DeletedConstants.FALSE);
        IPage<adminUser> result = ${root.entityClassVarName}Service.page(page, queryWrapper);
        return R.ok(result);
    }

    @Operation(summary = "按条件查询所有")
    @PostMapping("/v1/listAll")
    @PreAuthorize("@atc.admin")//默认只有管理员能访问该接口。其他设置：@atc.admin、@atc.user、@atc.inside、@atc.hasAuthority('xxx')
    public R<List<${root.entityClassName}>> v1ListAll(@RequestBody ${root.entityClassName} o) {
#if($root.controllerContainsDeleted)
        o.setDeleted(DeletedConstants.FALSE);
#end
        QueryWrapper<${root.entityClassName}> queryWrapper = new QueryWrapper<>();
        queryWrapper.eq("deleted", DeletedConstants.FALSE);
        return R.ok(${root.entityClassVarName}Service.list(queryWrapper));
    }

    @Operation(summary = "按ID获取信息")
    @GetMapping("/v1/info/{id}")
    @PreAuthorize("@atc.admin")//默认只有管理员能访问该接口。其他设置：@atc.admin、@atc.user、@atc.inside、@atc.hasAuthority('xxx')
    public R<${root.entityClassName}> v1Info(@PathVariable String id) {
        return R.ok(${root.entityClassVarName}Service.getById(id));
    }

    @Operation(summary = "按ID删除")
    @GetMapping("/v1/delete/{id}")
    @PreAuthorize("@atc.admin")//默认只有管理员能访问该接口。其他设置：@atc.admin、@atc.user、@atc.inside、@atc.hasAuthority('xxx')
    public R<Void> v1Delete(@PathVariable String id) {
        ${root.entityClassName} o = new ${root.entityClassName}();
        o.set${root.idColumn.javaName.substring(0,1).toUpperCase()}${root.idColumn.javaName.substring(1)}(id);
#if($root.controllerContainsDeleted)
        o.setDeleted(DeletedConstants.TRUE);
#end
        ${root.entityClassVarName}Service.updateById(o);
        return R.ok();
    }

    @Operation(summary = "按ID修改")
    @PostMapping("/v1/modify")
    @PreAuthorize("@atc.admin")//默认只有管理员能访问该接口。其他设置：@atc.admin、@atc.user、@atc.inside、@atc.hasAuthority('xxx')
    public R<Void> v1Modify(@RequestBody @Validated ${root.entityClassName} o) {
#if($root.controllerContainsDeleted)
        o.setDeleted(DeletedConstants.FALSE);
#end
        ${root.entityClassVarName}Service.updateById(o);
        return R.ok();
    }

    @Operation(summary = "新增")
    @PostMapping("/v1/add")
    @PreAuthorize("@atc.admin")//默认只有管理员能访问该接口。其他设置：@atc.admin、@atc.user、@atc.inside、@atc.hasAuthority('xxx')
    public R<Void> v1Add(@RequestBody @Validated ${root.entityClassName} o) {
        o.set${root.idColumn.javaName.substring(0,1).toUpperCase()}${root.idColumn.javaName.substring(1)}(IdUtil.randomUUID());
#if($root.controllerContainsDeleted)
        o.setDeleted(DeletedConstants.FALSE);
#end
        ${root.entityClassVarName}Service.save(o);
        return R.ok();
    }
}